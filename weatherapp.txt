import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import requests

API_KEY = 'YOUR_API_KEY_HERE'  # Replace with your OpenWeatherMap API key
BASE_URL = 'https://api.openweathermap.org/data/2.5/weather'

class WeatherApp:
    def __init__(self, root):
        self.root = root
        self.root.title('Weather App')
        self.root.geometry('400x400')
        self.root.resizable(False, False)

        self.city_label = tk.Label(root, text='Enter City Name:', font=('Arial', 12))
        self.city_label.pack(pady=10)

        self.city_entry = tk.Entry(root, width=30, font=('Arial', 12))
        self.city_entry.pack(pady=5)

        self.fetch_button = tk.Button(root, text='Fetch Weather', command=self.show_weather, font=('Arial', 12))
        self.fetch_button.pack(pady=10)

        self.weather_icon = tk.Label(root)
        self.weather_icon.pack()

        self.weather_info = tk.Label(root, text='', font=('Arial', 12), justify='left')
        self.weather_info.pack(pady=10)

    def fetch_weather(self, city):
        try:
            url = f'{BASE_URL}?q={city}&appid={API_KEY}&units=metric'
            response = requests.get(url, timeout=10)
            response.raise_for_status()  # Ensures any HTTP errors are raised
            data = response.json()

            if data.get('cod') == 200:
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']
                icon = data['weather'][0]['icon']
                return temp, description, humidity, wind_speed, icon
            else:
                messagebox.showwarning('Warning', f"City not found: {data.get('message', 'Unknown error')}")
                return None
        except requests.exceptions.Timeout:
            messagebox.showerror('Error', 'Request timed out. Please try again.')
        except requests.exceptions.ConnectionError:
            messagebox.showerror('Error', 'Network error. Please check your internet connection.')
        except requests.exceptions.HTTPError as err:
            messagebox.showerror('Error', f'Server error: {err}')
        except Exception as e:
            messagebox.showerror('Error', f'Unexpected error: {e}')

    def show_weather(self):
        city = self.city_entry.get().strip()
        if city:
            weather = self.fetch_weather(city)
            if weather:
                temp, description, humidity, wind_speed, icon = weather
                icon_url = f'https://openweathermap.org/img/wn/{icon}.png'

                try:
                    icon_image = Image.open(requests.get(icon_url, stream=True).raw)
                    icon_image = icon_image.resize((50, 50))
                    icon_photo = ImageTk.PhotoImage(icon_image)
                    self.weather_icon.config(image=icon_photo)
                    self.weather_icon.image = icon_photo
                except Exception:
                    self.weather_icon.config(text='[Icon not available]')

                self.weather_info.config(
                    text=f'Temperature: {temp}Â°C\nDescription: {description.title()}\nHumidity: {humidity}%\nWind Speed: {wind_speed} m/s'
                )
            else:
                self.weather_info.config(text='Unable to fetch weather information.')
        else:
            messagebox.showwarning('Warning', 'Please enter a city name.')

if __name__ == '__main__':
    root = tk.Tk()
    app = WeatherApp(root)
    root.mainloop()
